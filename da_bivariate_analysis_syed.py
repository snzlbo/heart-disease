# -*- coding: utf-8 -*-
"""DA_Bivariate Analysis_syed

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1osLLxvJBvMYV14SHabznUdnCL9WxIyhF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import chi2_contingency, ttest_ind, mannwhitneyu
from scipy.stats import mannwhitneyu

df = pd.read_csv('/content/heart_cleaned.csv')
df.head()

df.columns

df.info()

df.isnull().sum()

df.describe()

"""## converting to binary"""

data = df.copy()

"""These thresholds are common in clinical practice; binaries help quickly test relationships with heart disease."""

# Binary encoding: Sex -> 1 = Male, 0 = Female (if values are 'M','F' or 'Male','Female')
data['Sex_bin'] = data['Sex'].map({'M':1, 'F':0, 'Male':1, 'Female':0})
# if mapping yields NaN (different labels), fallback to LabelEncoder:
if data['Sex_bin'].isnull().any():
    data['Sex_bin'] = LabelEncoder().fit_transform(data['Sex'])

# ExerciseAngina -> 1 if 'Y' or 'Yes' or 'Yes' like; else 0
data['ExerciseAngina_bin'] = data['ExerciseAngina'].map({'Y':1,'N':0,'Yes':1,'No':0})
if data['ExerciseAngina_bin'].isnull().any():
    data['ExerciseAngina_bin'] = LabelEncoder().fit_transform(data['ExerciseAngina'])

# Create clinically-relevant binary features
data['Cholesterol_high'] = (data['Cholesterol'] >= 240).astype(int)   # 240 mg/dL often threshold for high cholesterol
data['RestingBP_high'] = (data['RestingBP'] >= 130).astype(int)      # 130 mmHg threshold (e.g., elevated BP)
data['Age_50_plus'] = (data['Age'] >= 50).astype(int)
data['Oldpeak_high'] = (data['Oldpeak'] >= 1.0).astype(int)          # 1.0 ST depression as rough indicator

# shape & dtypes
print("Shape:", data.shape)
print("\nDtypes:\n", data.dtypes)

# Numerical summary
display(data.describe())

# Categorical unique counts
for col in data.select_dtypes(include='object').columns:
    print(col, "->", data[col].nunique(), "unique:", data[col].unique())

"""balance of target variable"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='HeartDisease', data=data)
plt.title("Heart Disease Distribution (0 = No, 1 = Yes)")
plt.show()

data['HeartDisease'].value_counts(normalize=True).round(3)

"""## Distribution of numeric features"""

num_cols = ['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']
data[num_cols].hist(figsize=(10,6), bins=15, color='skyblue', edgecolor='black')
plt.suptitle("Distribution of Numerical Features")
plt.show()

"""# detect outliers"""

for col in num_cols:
    sns.boxplot(x=data[col], color='lightgreen')
    plt.title(f"Boxplot: {col}")
    plt.show()

"""Categorical feature distributions"""

cat_cols = ['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope']
for c in cat_cols:
    sns.countplot(x=c, data=data, order=data[c].value_counts().index, palette="Set2")
    plt.title(f"Category Distribution: {c}")
    plt.xticks(rotation=30)
    plt.show()

"""## bivariate analysis"""

plt.style.use('seaborn-v0_8-darkgrid')

"""# Bivariate Analysis — Numerical vs Target

# Age vs HeartDisease
"""

# People with heart disease tend to be older.
# Median age of diseased patients is higher than non-diseased.
# Age is a strong positive risk factor.
sns.boxplot(x='HeartDisease', y='Age', data=data)
plt.title('Age vs Heart Disease')
plt.show()

"""RestingBP vs HeartDisease"""

# Patients with heart disease often have slightly higher resting BP, but the overlap is significant.
# BP alone isn’t a strong differentiator — but contributes when combined with other factors.
sns.boxplot(x='HeartDisease', y='RestingBP', data=data)
plt.title('Resting Blood Pressure vs Heart Disease')
plt.show()

"""Cholesterol vs HeartDisease"""

# Cholesterol levels don’t show a huge visible difference.
# High cholesterol isn’t always correlated directly — but still medically relevant.
sns.boxplot(x='HeartDisease', y='Cholesterol', data=data)
plt.title('Cholesterol vs Heart Disease')
plt.show()

"""ChestPainType vs HeartDisease"""

# The “ASY” (Asymptomatic) type overwhelmingly appears in patients with heart disease (HeartDisease=1).

#  “ATA” (Atypical Angina) is mostly found in healthy individuals (HeartDisease=0).sns.countplot(x='ChestPainType', hue='HeartDisease', data=data)
plt.title('Chest Pain Type vs Heart Disease', fontsize=14)
plt.xlabel('Chest Pain Type')
plt.ylabel('Count')
plt.show()

"""Oldpeak vs HeartDisease"""

# Oldpeak is a very strong continuous predictor — the higher it is, the more likely heart disease is present.
sns.boxplot(x='HeartDisease', y='Oldpeak', data=data)
plt.title('Oldpeak (ST Depression) vs Heart Disease', fontsize=14)
plt.xlabel('Heart Disease (0 = No, 1 = Yes)')
plt.ylabel('Oldpeak Value')
plt.show()

"""MaxHR vs HeartDisease"""

# Patients with heart disease tend to have lower MaxHR compared to healthy individuals.
sns.boxplot(x='HeartDisease', y='MaxHR', data=data, palette='Set2')
plt.title('Maximum Heart Rate vs Heart Disease', fontsize=14)
plt.xlabel('Heart Disease (0 = No, 1 = Yes)')
plt.ylabel('MaxHR')
plt.show()

"""ExerciseAngina vs HeartDisease"""

# Most people who experience angina during exercise (Y) have heart disease.
# ExerciseAngina is a clear and binary predictor — “Y” almost always signals disease.
sns.countplot(x='ExerciseAngina', hue='HeartDisease', data=data, palette='pastel')
plt.title('Exercise-Induced Angina vs Heart Disease', fontsize=14)
plt.xlabel('Exercise Angina (N = No, Y = Yes)')
plt.ylabel('Count')
plt.show()

"""ST_Slope vs HeartDisease"""

# “Flat” slope is the most common ECG pattern among diseased patients.

sns.countplot(x='ST_Slope', hue='HeartDisease', data=data, palette='coolwarm')
plt.title('ST Slope vs Heart Disease', fontsize=14)
plt.xlabel('ST Slope Type')
plt.ylabel('Count')
plt.show()

"""Overall Conclusion for bivariate analysis"""

# The most important bivariate relationships are seen with ChestPainType, Oldpeak, MaxHR, ExerciseAngina, and ST_Slope.
# These variables show clear, statistically and visually distinct differences between patients with and without heart disease,
# and are our top priorities for modeling.

import matplotlib.pyplot as plt
import seaborn as sns

# Set figure style
sns.set(style="whitegrid", palette="coolwarm")
plt.figure(figsize=(16, 12))

# 1️⃣ ChestPainType
plt.subplot(2, 3, 1)
sns.countplot(x='ChestPainType', hue='HeartDisease', data=data)
plt.title('Chest Pain Type vs Heart Disease')
plt.xlabel('Chest Pain Type')
plt.ylabel('Count')

# 2️⃣ ST_Slope
plt.subplot(2, 3, 2)
sns.countplot(x='ST_Slope', hue='HeartDisease', data=data)
plt.title('ST Slope vs Heart Disease')
plt.xlabel('ST Slope')
plt.ylabel('Count')

# 3️⃣ ExerciseAngina
plt.subplot(2, 3, 3)
sns.countplot(x='ExerciseAngina', hue='HeartDisease', data=data)
plt.title('Exercise Angina vs Heart Disease')
plt.xlabel('Exercise Angina (Y/N)')
plt.ylabel('Count')

# 4️⃣ MaxHR (numeric)
plt.subplot(2, 3, 4)
sns.kdeplot(data=data, x='MaxHR', hue='HeartDisease', fill=True)
plt.title('Max Heart Rate vs Heart Disease')
plt.xlabel('MaxHR')

# 5️⃣ Oldpeak (numeric)
plt.subplot(2, 3, 5)
sns.kdeplot(data=data, x='Oldpeak', hue='HeartDisease', fill=True)
plt.title('Oldpeak vs Heart Disease')
plt.xlabel('Oldpeak')

# 6️⃣ Age (numeric)
plt.subplot(2, 3, 6)
sns.kdeplot(data=data, x='Age', hue='HeartDisease', fill=True)
plt.title('Age vs Heart Disease')
plt.xlabel('Age')

plt.tight_layout()
plt.show()